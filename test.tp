type unit
  let unit = extern unit

type never

type bool
  let true = extern bool
  let false = extern bool

type 'a list
  let nil = extern 'a list
  let cons = extern 'a -> 'a list -> 'a list

// type-equivalent of a match for a list
let match_list = extern 
  'a list ->                // list to match
  (unit -> 'b) ->           // nil case
  ('a -> 'a list -> 'b) ->  // cons case
  'b                        // result


let println = extern (string -> unit)
let to_string = extern ('a -> string)
let loop = extern (unit -> unit) -> never // let rec loop f = f (); loop f

// fixed-point combinator to avoid implementing recursion for now
let fix = extern (('a -> 'b) -> 'a -> 'b) -> 'a -> 'b

let id = (fun x -> x)(fun x -> x)

let inspect = fun x ->
  let _ = println(to_string(x)) in
  x

let spam = fun msg ->
  loop (fun -> println(msg))

let map =
  let map_inner = fun rec f lst ->
    match_list (lst,
      fun -> nil,
      fun h t -> cons(f(h), rec(f, t)),
    )
  in fix(map_inner)

let fold = 
  let fold_inner = fun rec zero op lst ->
    match_list (lst,
      fun -> zero,
      fun h t -> op(h, rec(zero, op, t))
    )
 in fix(fold_inner)

let hello = fun -> println("Hello, World!")
